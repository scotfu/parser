The Ada Program: unbounded_strings.adb

  1 -- unbounded_strings.adb: generic package implementing unbounded-length strings
  2 
  3 with Ada.Unchecked_Deallocation;-- Generic proc for freeing memory (Ada95 13.11.2)
  4 use Ada;
  5 
  6 package body Unbounded_Strings is
  7 
  8    procedure Free is new Unchecked_Deallocation (Object => String,
  9                                                  Name   => Unbounded_String);
 10 
 11    ------------------------------------------------------------------------------
 12    -- Relational operators
 13    ------------------------------------------------------------------------------
 14    function "<" (Left, Right: Unbounded_String) return Boolean is
 15    begin
 16       return  Left.all < Right.all;
 17    end "<";
 18 
 19    function "<=" (Left, Right: Unbounded_String) return Boolean is
 20    begin
 21       return  Left.all <= Right.all;
 22    end "<=";
 23 
 24    function ">" (Left, Right: Unbounded_String) return Boolean is
 25    begin
 26       return  Left.all > Right.all;
 27    end ">";
 28 
 29    function ">=" (Left, Right: Unbounded_String) return Boolean is
 30    begin
 31       return  Left.all >= Right.all;
 32    end ">=";
 33 
 34    function Equal (Left, Right: Unbounded_String) return Boolean is
 35    begin
 36       return  Left.all = Right.all;
 37    end Equal;
 38 
 39 
 40    ------------------------------------------------------------------------------
 41    -- Concatenation operators
 42    ------------------------------------------------------------------------------
 43    function "&" (Left, Right: Unbounded_String) return Unbounded_String is
 44    begin
 45       return (new String'(Left.all & Right.all));
 46    end "&";
 47 
 48    function "&" (Left: Unbounded_String; Right: Character)
 49                                                          return Unbounded_String is
 50    begin
 51       return (new String'(Left.all & Right));
 52    end "&";
 53 
 54    function "&" (Left: Character; Right: Unbounded_String)
 55                                                          return Unbounded_String is
 56    begin
 57       return (new String'(Left & Right.all));
 58    end "&";
 59 
 60    function "&" (Left : Unbounded_String; Right: String) return Unbounded_String is
 61    begin
 62       return (new String'(Left.all & Right));
 63    end "&";
 64 
 65    function "&" (Left : String; Right: Unbounded_String) return Unbounded_String is
 66    begin
 67       return (new String'(Left & Right.all));
 68    end "&";
 69 
 70 
 71    ------------------------------------------------------------------------------
 72    function Length (Source: Unbounded_String) return Natural is
 73    begin
 74       return Source.all'Length;
 75    end Length;
 76 
 77    ------------------------------------------------------------------------------
 78    procedure Assign (Target: in out Unbounded_String;
 79                      Source: in     Unbounded_String) is
 80    -- This procedure must work when Source and Target designate the same string
 81       Result : Unbounded_String;
 82    begin
 83       Result := new String'(Source.all);  -- Copy the source string
 84       Free (Target);                      -- Free memory held by Target
 85       Target := Result;                   -- Set Target to point to the copy
 86    end Assign;
 87 
 88    ------------------------------------------------------------------------------
 89    function Slice (Source : Unbounded_String;
 90                    Low    : Positive;
 91                    High   : Natural) return Unbounded_String is
 92    begin
 93       if High < Low then                -- Null string?
 94          return (new String'(""));
 95       elsif High <= Source.all'Length then  -- Normal case?
 96          return (new String'(Source.all(Low..High)));
 97       else                              -- Range out of bounds.
 98          raise Constraint_Error;
 99       end if;
100    end Slice;
101 
102    ------------------------------------------------------------------------------
103    function Element (Source : in Unbounded_String;
104                      Index  : in Positive) return Character is
105    begin
106       return Source.all(Index);
107    end Element;
108 
109    ------------------------------------------------------------------------------
110    function Index (Source, Pattern :  Unbounded_String) return Natural is
111       First : Positive;      -- Pattern is compared to
112       Last  : Positive;      -- Source (First..Last)
113    begin  -- Search
114       First := 1;            -- Begin search at the first position of Source
115       Last  := Pattern.all'Length;
116       Search_Loop:  -- Each iteration, the pattern is compared to one slice
117       loop          -- of the source
118          -- Exit when there are fewer characters remaining in Source to check
119          -- than there are in the Pattern or when match is found
120          exit when Last > Source.all'Length or else
121                    Source.all(First..Last) = Pattern.all;
122          First := First + 1;
123          Last  := Last  + 1;
124       end loop Search_Loop;
125       if Last <= Source.all'Length then   -- Did we find the pattern?
126          return First;
127       else
128          return 0;
129       end if;
130    end Index;
131 
132    --------------
133    -- Conversions
134    --------------
135 
136    ------------------------------------------------------------------------------
137    function To_String (Source : in Unbounded_String) return String is
138    begin
139       return Source.all;   -- return the slice
140    end To_String;
141 
142 
143    ------------------------------------------------------------------------------
144    function To_Unbounded_String (Source : in String) return Unbounded_String is
145    begin
146       return new String'(Source);
147    end To_Unbounded_String;
148 
149 
150    ------------------------------------------------------------------------------
151    -- Input and Output Operations
152    ------------------------------------------------------------------------------
153    procedure Get_Line (File: in  Text_IO.File_Type := Text_IO.Current_Input;
154                        Item: out Unbounded_String) is
155       Buffer: String (1..100);
156       Length: Natural;
157    begin
158       Text_IO.Get_Line (File => File, Item => Buffer, Last => Length);
159       Free (Item);
160       Item := new String'(Buffer (1..Length));
161    end Get_Line;
162 
163    ------------------------------------------------------------------------------
164    procedure Put (File: in Text_IO.File_Type := Text_IO.Current_Output;
165                   Item: in Unbounded_String) is
166    begin
167       Text_IO.Put (File => File, Item => Item.all);
168    end Put;
169 
170 end Unbounded_Strings;